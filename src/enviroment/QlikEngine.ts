import { IConnectQCS, IQlik, IUser } from "./types";

const QlikEngine = {
  connectQCS: (config: IConnectQCS) =>
    new Promise((resolve) => {
      const tenantUri = `https://${config.host}`;

      QlikEngine.request(config, tenantUri, "/api/v1/users/me").then(
        (user: IUser | Response) => {
          if ("name" in user) console.log(`Logged in, ${user.name}`);

          QlikEngine.loadCapSAAS(config).then(() => {
            window.requirejs.config({
              webIntegrationId: config.webIntegrationId,
              baseUrl: `${tenantUri}${config.prefix}resources`,
            });

            window.requirejs(["js/qlik"], (qlik: IQlik) => {
              resolve(qlik);
            });
          });
        },
        () => {
          console.log("Redirecting to Qlik Cloud...");
          const returnTo = encodeURIComponent(window.location.href);
          window.location.href = `${tenantUri}/login?returnto=${returnTo}&qlik-web-integration-id=${config.webIntegrationId}`;
        }
      );
    }),

  loadCapSAAS: async (config: IConnectQCS) => {
    try {
      const tenantUrl = config.host;
      const { webIntegrationId } = config;

      const link = document.createElement("link");
      link.rel = "stylesheet";
      link.href = `https://${tenantUrl}/resources/autogenerated/qlik-styles.css`;
      document.head.appendChild(link);
      link.loaded = new Promise((resolve) => {
        link.onload = () => {
          resolve();
        };
      });

      const script = document.createElement("script");
      script.src = `https://${tenantUrl}/resources/assets/external/requirejs/require.js`;
      script.onload = async () => {
        window.require.config({
          baseUrl: `https://${tenantUrl}/resources`,
          webIntegrationId,
        });
      };
      document.body.appendChild(script);
      script.loaded = new Promise((resolve) => {
        script.onload = () => {
          resolve();
        };
      });

      await Promise.all([link.loaded, script.loaded]);
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error);
      throw new Error(errorMessage);
    }
  },
  request: (
    config: IConnectQCS,
    tenantUri: string,
    path: string,
    returnJson = true
  ) =>
    new Promise<IUser | Response>((resolve, reject) => {
      fetch(`${tenantUri}${path}`, {
        mode: "cors",
        credentials: "include",
        redirect: "follow",
        headers: {
          "qlik-web-integration-id": config.webIntegrationId,
        },
      }).then(
        (res) => {
          if (res.status < 200 || res.status >= 400) reject(res);
          if (returnJson) {
            res.json().then(resolve).catch(reject);
          } else {
            resolve(res);
          }
        },
        (err) => {
          reject(err);
        }
      );
    }),
};

export { QlikEngine };
